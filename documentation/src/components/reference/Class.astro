---
import { referenceContent } from "../../utils/reference";

import MarkdownArticle from "../MarkdownArticle.astro";

import type { ReferenceContent } from "../../utils/reference";

interface Props {
	content: ReferenceContent;
}

const { content } = Astro.props;
const methods = referenceContent.filter(val => {
	return val.type === "method" && val.path.startsWith(content.path + "/")
})
---

<html>
	<head></head>
	<body>
		<header class="fixed top-0 w-screen bg-white z-10 border-b">
			<div class="px-8 border-b py-4">
				<p class="font-medium text-xl">Oslo</p>
			</div>
			<div class="px-8 flex gap-x-4 py-1.5">
				<a href="/reference" class="hover:underline">Modules</a>
				<a href={"/reference/" + content.module} class="hover:underline"
					><code class="text-sm">{content.moduleDisplayName}</code></a
				>
				<a href={"/reference/" + content.module + "/" + content.displayName} class="hover:underline"
					><code class="text-sm">{content.displayName}</code></a
				>
			</div>
		</header>
		<div>
			<div class="fixed w-72 border-r h-screen pt-24">
				<div class="flex flex-col gap-y-4 overflow-auto h-full pt-16 pb-8">
					<div class="px-8">
						<p class="font-medium"><a href={content.href} class="hover:underline"><code>{content.displayName}</code></a></p>
					</div>
					{
						methods.length > 0 && (
							<div class="px-8">
								<p class="text-sm font-medium mb-1">Methods</p>
								<ul>
									{methods.map((methodContent) => {
										return (
											<li class="pl-2 w-full py-0.5">
												<a href={methodContent.href} class="hover:underline">
													<code class="text-sm">{methodContent.displayName}</code>
												</a>
											</li>
										);
									})}
								</ul>
							</div>
						)
					}
				</div>
			</div>
			<main class="ml-72 w-fit px-16 pt-36 pb-16">
				<MarkdownArticle>
					<content.Markdown />
				</MarkdownArticle>
			</main>
		</div>
	</body>
</html>
